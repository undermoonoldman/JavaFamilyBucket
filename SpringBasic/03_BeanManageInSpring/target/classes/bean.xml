<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!--    把对象的创建交给Spring来管理-->
<!--    Spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期-->

<!--    第一种方式:默认构造函数创建,bean标签,配置id,class属性，且没有其他属性
        当没有默认构造函数时，则会出错-->
<!--    <bean id="accountService" class="com.undermoonoldman.service.AccountServiceImpl"></bean>-->

<!--    第二种方式:使用普通工厂中的普通方法创建对象-->
<!--    <bean id="instanceFactory" class="com.undermoonoldman.factory.InstanceFactory"></bean>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getService"></bean>-->

<!--    第三种方式:使用静态工厂中的静态方创建对象-->
<!--    <bean id="accountService" class="com.undermoonoldman.factory.StaticFactory" factory-method="getService"></bean>-->

<!--    bean的作用范围调整
        bean标签的scope属性
        singleton:单例,默认值
        prototype:多例
        request:作用于web应用的请求范围
        session:作用于web应用的会话范围
        global-session:作用于集群环境的会话范围(全局会话范围),在非集群环境下,等同于session
        -->

<!--    bean对象的生命周期
        单例:与容器相同
        多例:-->
    <bean id="accountService" class="com.undermoonoldman.service.AccountServiceImpl" init-method="init" destroy-method="destory"></bean>
</beans>