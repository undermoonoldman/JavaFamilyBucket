<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--    基于xml的AOP配置
    1.把通知的Bean也交给Spring管理
    2.使用aop:config标签表明开始AOP配置
    3.使用aop:aspect表示开始配置切面
        id属性:为切面指定唯一标识
        ref属性:指定通知类的bean的ID
    4.在aop:aspect标签内部使用对应标签配置通知的类型-->
    <!--    method属性:指定方法-->
    <!--    point属性:用于指定切入点表达式,用于指定对那些方法进行增强
                aop:before表示前置-->
    <!--        aop:after表示最终通知-->
    <!--        aop:after-throwing表示异常通知,异常通知与后置通知只能执行一个-->
    <!--        aop:after-returning表示后置通知,异常通知与后置通知只能执行一个-->
    <!--        aop:around表示环绕-->

    <!--    切入点表达式:关键字 execution(表达式)-->
    <!--    表达式:访问修饰符 返回值 包名.包名...类名.方法名(参数列表)

            标准写法:public void com.undermoonoldman.service.impl.AccountServiceImpl.saveAccount()
            访问修饰符可以省略:void com.undermoonoldman.service.impl.AccountServiceImpl.saveAccount()
            返回值可以使用通配符表示任意返回值:com.undermoonoldman.service.impl.AccountServiceImpl.saveAccount()
            包名可以使用通配符表示任意包,几级包,写几个*: *.*.*.*.saveAccount
            类名与方法名都可以使用*进行通配
            包名可以使用..表示当前包与其子包
            参数列表:可以直接写数据类型
                    基本类型直接写名称
                    引用类型写包名.类名的方式
                    可以使用通配符表示任意类型,但必须有参数
                    ..可以表示有无参数均可,有参数可以是任意类型
            全通配写法:* *..*(..)

            开发常用写法写到业务层实现类下的所有方法
                com.undermoonoldman.service.impl.*.*(..)-->

    <!--    配置用于通知的Bean,已经扫描了-->


    <!--    配置Logger类-->
    <bean id="logger" class="com.undermoonoldman.utils.Logger"></bean>

    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
<!--            <aop:before method="beforePrintLog" pointcut="execution(* com.undermoonoldman.service.impl.*.*(..))"></aop:before>-->
<!--            <aop:after-returning method="afterReturningPrintLog" pointcut="execution(* com.undermoonoldman.service.impl.*.*(..))"></aop:after-returning>-->
<!--            <aop:after-throwing method="afterThrowingPrintLog" pointcut="execution(* com.undermoonoldman.service.impl.*.*(..))"></aop:after-throwing>-->
<!--            <aop:after method="afterPrintLog" pointcut-ref="pointCut01"></aop:after>-->

            <aop:around method="aroundPrintLog" pointcut-ref="pointCut01"></aop:around>

<!--            定义切入点,id用于指定表达式的唯一标识,expression用于指定表达式内容
                写在aop:aspect标签内部只能当前切面使用
                写在aop:aspect外面可以多切面共享-->
            <aop:pointcut id="pointCut01" expression="execution(* com.undermoonoldman.service.impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>

    <bean id="accountService" class="com.undermoonoldman.service.impl.AccountServiceImpl"></bean>
</beans>