<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--1.要求映射配置文件与dao包结构相同
    2.namespace属性名称为dao接口的全限定类名
    3.id属性的取值为dao接口的方法名称
    4.resulType指定结果集封装对象
    当遵守了前三点后,可以不用写dao的实现类了-->
<mapper namespace="com.undermoonoldman.dao.UserDao">
    <!--    配置查询所有-->
    <!--    id指向方法名称-->
    <select id="findAll" resultType="com.undermoonoldman.bean.User">
        select * from user;
    </select>

<!--    配置插入后返回用户id-->
    <insert id="saveUser" parameterType="com.undermoonoldman.bean.User">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, address, sex, birthday) values (#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <update id="updateUser" parameterType="com.undermoonoldman.bean.User">
        update user set username = #{username}, address = #{address}, sex = #{sex}, birthday = #{birthday} where id = #{id};
    </update>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{userId};
    </delete>

    <select id="findUserById" resultType="com.undermoonoldman.bean.User" parameterType="java.lang.Integer">
        select * from user where id = #{userId}
    </select>

    <select id="findByName" parameterType="String" resultType="com.undermoonoldman.bean.User">
        select * from user where username like '%${value}%'
    </select>

    <select id="countTotal" resultType="int">
        select count(*) from user;
    </select>

    <select id="findUserByVo" parameterType="com.undermoonoldman.bean.QueryVo" resultType="com.undermoonoldman.bean.User">
        select * from user where username like #{user.username};
    </select>
</mapper>